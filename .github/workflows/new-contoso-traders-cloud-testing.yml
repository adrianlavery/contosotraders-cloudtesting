name: new-contoso-traders-cloud-testing

on:
  workflow_dispatch:


env:
#   ACR_NAME: contosotradersacr
#   AKS_CLUSTER_NAME: contoso-traders-aks
#   AKS_CPU_LIMIT: 250m
#   AKS_DNS_LABEL: contoso-traders-products
#   AKS_MEMORY_LIMIT: 256Mi
#   AKS_NODES_RESOURCE_GROUP_NAME: contoso-traders-aks-nodes-rg
#   AKS_REPLICAS: "1"
#   AKS_SECRET_NAME_ACR_PASSWORD: contoso-traders-acr-password
#   AKS_SECRET_NAME_KV_ENDPOINT: contoso-traders-kv-endpoint
#   AKS_SECRET_NAME_MI_CLIENTID: contoso-traders-mi-clientid
  AZURE_AD_APP_NAME: contoso-traders-cloud-testing-app
#   CARTS_ACA_NAME: contoso-traders-carts
#   CARTS_ACR_REPOSITORY_NAME: contosotradersapicarts
#   CARTS_INTERNAL_ACA_NAME: contoso-traders-intcarts
#   CDN_PROFILE_NAME: contoso-traders-cdn
#   CHAOS_AKS_EXPERIMENT_NAME: contoso-traders-chaos-aks-experiment
#   KV_NAME: contosotraderskv
#   LOAD_TEST_SERVICE_NAME: contoso-traders-loadtest
  MSGRAPH_API_ID: 00000003-0000-0000-c000-000000000000
  MSGRAPH_API_PERMISSION_EMAIL: 64a6cdd6-aab1-4aaf-94b8-3cc8405e90d0=Scope
  MSGRAPH_API_PERMISSION_USER_READ: e1fe6dd8-ba31-4d61-89e7-88639da4683d=Scope
#   PRODUCTS_ACR_REPOSITORY_NAME: contosotradersapiproducts
  PRODUCTS_DB_NAME: productsdb
  PRODUCTS_DB_SERVER_NAME: contosotraders-products
  PRODUCTS_DB_USER_NAME: localadmin
#   PRODUCT_DETAILS_CONTAINER_NAME: product-details
#   PRODUCT_IMAGES_STORAGE_ACCOUNT_NAME: contosotradersimg
#   PRODUCT_LIST_CONTAINER_NAME: product-list
#   PRODUCTS_CDN_ENDPOINT_NAME: contoso-traders-images
  RESOURCE_GROUP_NAME: contoso-traders-rg
#   STORAGE_ACCOUNT_NAME: contosotradersimg
#   UI_CDN_ENDPOINT_NAME: contoso-traders-ui2
#   UI_STORAGE_ACCOUNT_NAME: contosotradersui2
#   USER_ASSIGNED_MANAGED_IDENTITY_NAME: contoso-traders-mi-kv-access
#   PROD_VM: jjprodapi.westeurope.cloudapp.azure.com
#   CART_VM: jjcartapi.westeurope.cloudapp.azure.com
#   PROD_VM_NAME: prodVM
#   CART_VM_NAME: cartVM
  

jobs:
  provision:
    runs-on: ubuntu-22.04
    env:
      AADUSERNAME: ${{ secrets.AADUSERNAME }}
      AADPASSWORD: ${{ secrets.AADPASSWORD }}
    outputs:
      azureAdAppClientId: ${{ steps.get-azureAdAppClientId.outputs.azureAdAppClientId }}
      azureAdAppObjId: ${{ steps.get-azureAdAppObjId.outputs.azureAdAppObjId }}
    #   cartsApiEndpoint: ${{ steps.get-cartsApiEndpoint.outputs.cartsApiEndpoint }}
    #   productsApiEndpoint: ${{ steps.get-productsApiEndpoint.outputs.productsApiEndpoint }}
    #   uiCdnEndpoint: ${{ steps.get-uiCdnEndpoint.outputs.uiCdnEndpoint }}
    concurrency:
      group: provision
      cancel-in-progress: true
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SERVICEPRINCIPAL }}
      # section #0: optional configuration of the Azure AD app.
      # create the Azure AD application (and update it if it already exists).
      # note: This is an idempotent operation.
      - name: create/update azure active directory app
        uses: azure/CLI@v1
        if: ${{ env.AADUSERNAME != '' && env.AADPASSWORD != '' }}
        with:
          inlineScript: az ad app create --display-name ${{ env.AZURE_AD_APP_NAME}}${{ vars.SUFFIX }} --sign-in-audience AzureADandPersonalMicrosoftAccount
      - name: get azure ad app's object id
        uses: azure/CLI@v1
        if: ${{ env.AADUSERNAME != '' && env.AADPASSWORD != '' }}
        id: get-azureAdAppObjId
        with:
          inlineScript: echo "azureAdAppObjId"="$(az ad app list --display-name ${{ env.AZURE_AD_APP_NAME }}${{ vars.SUFFIX }} --query [].id -o tsv)" >> $GITHUB_OUTPUT
      - name: get azure ad app's client id
        uses: azure/CLI@v1
        if: ${{ env.AADUSERNAME != '' && env.AADPASSWORD != '' }}
        id: get-azureAdAppClientId
        with:
          inlineScript: echo "azureAdAppClientId"="$(az ad app list --display-name ${{ env.AZURE_AD_APP_NAME }}${{ vars.SUFFIX }} --query [].appId -o tsv)" >> $GITHUB_OUTPUT
      - name: register app as a spa
        uses: azure/CLI@v1
        if: ${{ env.AADUSERNAME != '' && env.AADPASSWORD != '' }}
        with:
          inlineScript: |
            az rest \
              --method PATCH \
              --uri https://graph.microsoft.com/v1.0/applications/${{ steps.get-azureAdAppObjId.outputs.azureAdAppObjId }} \
              --headers 'Content-Type=application/json' \
              --body '{"spa":{"redirectUris":["https://localhost:3000/authcallback","http://localhost:3000/authcallback","https://production.contosotraders.com/authcallback","https://cloudtesting.contosotraders.com/authcallback"]}}'
      - name: enable issuance of id, access tokens
        uses: azure/CLI@v1
        if: ${{ env.AADUSERNAME != '' && env.AADPASSWORD != '' }}
        with:
          inlineScript: az ad app update --id ${{ steps.get-azureAdAppObjId.outputs.azureAdAppObjId }} --enable-access-token-issuance true --enable-id-token-issuance true
      - name: enable email claim in access token
        uses: azure/CLI@v1
        if: ${{ env.AADUSERNAME != '' && env.AADPASSWORD != '' }}
        with:
          inlineScript: az ad app update --id ${{ steps.get-azureAdAppObjId.outputs.azureAdAppObjId }} --optional-claims "{\"accessToken\":[{\"name\":\"email\",\"essential\":false}]}"
      # note: requesting MS Graph permissions in Azure AD app unfortunately isn't idempotent.
      # Even, if you have already requested the permissions, it'll keep adding to the list of requested permissions until you hit limit on max permissions requested.
      # Details: https://github.com/Azure/azure-cli/issues/24512
      - name: delete any requested Microsoft Graph permissions
        uses: azure/CLI@v1
        if: ${{ env.AADUSERNAME != '' && env.AADPASSWORD != '' }}
        with:
          inlineScript: |
            az ad app permission delete \
              --id ${{ steps.get-azureAdAppObjId.outputs.azureAdAppObjId }} \
              --api ${{ env.MSGRAPH_API_ID }}
      - name: request Microsoft Graph permissions
        uses: azure/CLI@v1
        if: ${{ env.AADUSERNAME != '' && env.AADPASSWORD != '' }}
        with:
          inlineScript: |
            az ad app permission add \
              --id ${{ steps.get-azureAdAppObjId.outputs.azureAdAppObjId }} \
              --api ${{ env.MSGRAPH_API_ID }} \
              --api-permissions ${{ env.MSGRAPH_API_PERMISSION_USER_READ }} ${{ env.MSGRAPH_API_PERMISSION_EMAIL }}
      #
      # section #1: provisioning the resources on Azure using bicep templates
      #
      # The first step is to create the resource group: `contoso-traders-rg`.
      # The below step can also be manually executed as follows:
      # az deployment sub create --location {LOCATION} --template-file .\createResourceGroup.bicep
      # Note: You can specify any location for `{LOCATION}`. It's the region where the deployment metadata will be stored, and not
      # where the resource groups will be deployed.
      - name: create resource group
        uses: Azure/arm-deploy@v1
        with:
          scope: subscription
          region: ${{ vars.DEPLOYMENTREGION }}
          template: ./iac/createResourceGroup.bicep
          parameters: rgName=${{ env.RESOURCE_GROUP_NAME }} suffix=${{ vars.SUFFIX }} rgLocation=${{ vars.DEPLOYMENTREGION }}
      # Next step is to deploy the Azure resources to the resource group `contoso-traders-rg` created above. The deployed resources
      # include storage accounts, function apps, app services cosmos db, and service bus etc.
      # The below step can also be manually executed as follows:
      # az deployment group create -g contoso-traders-rg --parameters .\newCreateResources.bicepparams
      # We use an az cli inline script here as inline parameters is not currently supported with the Azure/arm-deploy action.
      - name: create resources
        id: createResources
        uses: Azure/cli@v2
        with:
          inlineScript: |
            az deployment group create -g ${{ env.RESOURCE_GROUP_NAME }}${{ vars.SUFFIX }} `
            --parameters ./iac/createResources.bicepparam `
            --parameters suffix=${{ vars.SUFFIX }} `
            deployMultiRegion=${{ vars.DEPLOYMULTIREGION }} `
            primaryLocation=${{ vars.DEPLOYMENTREGION }} `
            secondaryLocation=${{ vars.SECONDARYREGION }} `
            adminPassword=${{ secrets.ADMINPASSWORD }} `
            deployPrivateEndpoints=${{ vars.DEPLOYPRIVATEENDPOINTS }} `
            deployBackendIaas=${{ vars.DEPLOYBACKENDONIAAS }}

                    
      # Seed the DBs and storage accounts
      - name: seed AzureSQL products db
        uses: azure/sql-action@v2.2
        if: ${{ vars.DEPLOYBACKENDONIAAS == 'false' }}
        with:
          connection-string: Server=tcp:${{ env.PRODUCTS_DB_SERVER_NAME }}${{ vars.SUFFIX }}.database.windows.net,1433;Initial Catalog=${{ env.PRODUCTS_DB_NAME }};Persist Security Info=False;User ID=${{ env.PRODUCTS_DB_USER_NAME }};Password=${{ secrets.ADMINPASSWORD }};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
          path: ./src/ContosoTraders.Api.Products/Migration/productsdb.sql
      - name: seed SQL VM products db
        uses: azure/sql-action@v2.2
        if: ${{ vars.DEPLOYBACKENDONIAAS == 'true' }}
        with:
          connection-string: Server=tcp:${{ env.PRODUCTS_DB_SERVER_NAME }}${{ vars.SUFFIX }}.${{ vars.DEPLOYMENTREGION }}.cloudapp.azure.com,1433;Initial Catalog=${{ env.PRODUCTS_DB_NAME }};Persist Security Info=False;User ID=${{ env.PRODUCTS_DB_USER_NAME }};Password=${{ secrets.ADMINPASSWORD }};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
          path: ./src/ContosoTraders.Api.Products/Migration/productsdb.sql
